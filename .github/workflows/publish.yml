name: Publish

on:
  push:
    tags:
      - v*.*.*

jobs:
  pre-publish-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@e207df5d269b42b69c8bc5101da26f7d31feddb4 # v2.6.2
      - name: Setup integration test
        working-directory: crates/jpreprocess/tests
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release download --repo jpreprocess/open_jtalk v0.0.5
          chmod +x openjtalk_bin

          gh release download --repo jpreprocess/jpreprocess v0.0.1-rc0
          tar xJvf dictionaries.tar.xz

          rm *.tar.gz *.tar.xz
      - name: Build
        run: cargo build --verbose --all-features
      - name: Run tests
        run: cargo test --verbose --all-features -- --include-ignored
      - name: Run Clippy
        run: cargo clippy --all-targets

  build-binary:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            feature: ""
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            feature: "naist-jdic"
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            feature: ""
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            feature: "naist-jdic"
          - target: x86_64-apple-darwin
            os: macos-latest
            feature: ""
          - target: aarch64-apple-darwin
            os: macos-latest
            feature: ""
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - uses: actions-rs/cargo@844f36862e911db73fe0815f00a4a2602c279505 # v1.0.3
        with:
          command: build
          args: --release --target=${{ matrix.target }} --features=binary,${{ matrix.feature }}
          use-cross: true

      - run: |
          zip --junk-paths ${{ matrix.target }}-${{ matrix.feature }}.zip target/${{ matrix.target }}/release/{jpreprocess,dict_tools}{,.exe}

      - name: Upload Artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: build-${{ matrix.target }}-${{ matrix.feature }}
          path: ${{ matrix.target }}-${{ matrix.feature }}.zip

  build-naist-jdic:
    runs-on: ubuntu-latest
    needs: [build-binary]
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          repository: jpreprocess/naist-jdic
          ref: v0.1.1
          path: naist-jdic-source
      - name: Download binary
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: build-x86_64-unknown-linux-gnu-
      - name: Build
        run: |
          unzip x86_64-unknown-linux-gnu-.zip
          chmod +x dict_tools
          ./dict_tools build jpreprocess naist-jdic-source naist-jdic
      - name: Package naist-jdic
        run: |
          tar czvf naist-jdic-jpreprocess.tar.gz naist-jdic
      - name: Upload Artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: naist-jdic
          path: naist-jdic-jpreprocess.tar.gz

  publish-crates:
    runs-on: ubuntu-latest
    needs: [pre-publish-test]
    env:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: publish
        run: |
          publish_package () {
            VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r ".packages[] | select(.name==\"$1\") | .version")
            VERSIONS=$(curl -s -XGET "https://crates.io/api/v1/crates/$1" | jq -r 'select(.versions != null) | .versions[].num')
            if echo "${VERSIONS}" | grep "${VERSION}" >/dev/null; then
              echo "$1 ${VERSION} has already been published"
            else
              sleep 15
              cargo publish -p "$1" --all-features
            fi
          }

          publish_package "jpreprocess-core"
          sleep 5
          publish_package "jpreprocess-dictionary-builder"
          sleep 5
          publish_package "jpreprocess-naist-jdic"
          sleep 5
          publish_package "jpreprocess-window"
          sleep 5
          publish_package "jpreprocess-dictionary"
          sleep 5
          publish_package "jpreprocess-njd"
          sleep 5
          publish_package "jpreprocess-jpcommon"
          sleep 5
          publish_package "jpreprocess"

  create-release:
    name: Create Release
    permissions:
      contents: write
    needs: [build-binary, build-naist-jdic, publish-crates]
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
      - name: Check Tag
        id: check-tag
        run: |
          if [[ ${{ github.event.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Not prerelease"
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "Prerelease"
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi
      - name: Create release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: ${{ steps.check-tag.outputs.prerelease == 'true' }}
          files: |
            **/*.zip
            **/*.tar.gz
